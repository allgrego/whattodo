import { dehydrate, QueryClient } from '@tanstack/react-query'
import { useQuery } from '@tanstack/react-query'
import type { NextPage } from 'next'
import Head from 'next/head'
import Card from '../components/card/Card'
import MainLayout from '../layouts/mainLayout/MainLayout'
import RandomActivityCard from '../components/randomActivityCard/RandomActivityCard'
import { getRandomActivity } from '../utils/fetch'
import { getFavoriteActivities } from '../utils/activities'
import FavoriteActivitiesCard from '../components/favoriteActivitiesCard/FavoriteActivitiesCard'

interface HomeProps {
  isLoading?: boolean,
  activity?: Record<string, any>
  error?: any
}

const Home: NextPage<HomeProps> = () => {


  // Queries
  // SERVER SIDE
  const { isLoading, data: activity, error, refetch, isRefetching } = useQuery(['randomActivity'], getRandomActivity, {
    // Do not refetch automatically to don't lose the current activity
    refetchOnMount: false,
    refetchOnReconnect: false,
    refetchOnWindowFocus: false
  })

  // CLIENT SIDE
  const { isLoading: isLoadingFavorites, data: favorites, refetch: refetchFavorites } = useQuery(['favorites'], getFavoriteActivities, {
    refetchInterval: 500
  })

  const participantsNumber = activity?.participants || 1
  let participantsArray = []
  for (let i = 0; i < participantsNumber; i++) participantsArray.push(i)

  if (isLoading) {
    return (
      <MainLayout>
        <div className='text-white font-semibold text-2xl text-center my-40'>
          <div role="status">
            <svg className="inline mr-2 w-20 h-20 text-gray-200 animate-spin dark:text-slate-600 fill-indigo-600" viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z" fill="currentColor" />
              <path d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z" fill="currentFill" />
            </svg>
            <span className="sr-only">Loading...</span>
          </div>
        </div>
      </MainLayout>
    )
  }

  if (error) {
    return (
      <MainLayout>
        <div className='my-40 text-red-400 text-md font-bold text-center'>
          <p>
            Ups! There was an internal error fetching the data üò¢
          </p>
          <p className='text-white font-normal text-sm mt-5'>
            Try refreshing the page. Or let me know there is something wrong at allgrego14@gmail.com
          </p>
        </div>
      </MainLayout>
    )
  }

  const getAnotherRandom = () => {
    refetch()
  }

  return (
    <div >
      <Head>
        <title>WhatToDo</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <MainLayout>
        <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-10 mb-10">
          {isLoading && (
            <>
              <div className='text-white'>Loading data...</div>
            </>
          )}

          {/* Random Activity */}
          {
            !!activity && (
              <RandomActivityCard
                activity={activity}
                isLoading={isLoading || isRefetching}
                getAnotherRandom={getAnotherRandom}
                favorites={favorites}
              />
            )
          }

          {/* Favorites */}
          <FavoriteActivitiesCard
            allFavorites={favorites}
          />

          {/* Under construction */}
          <Card>
            <div className="px-4 py-5 sm:px-6">
              <h3 className="text-xl font-medium leading-6 text-gray-900 dark:text-white mb-2">Something else here üöß</h3>
              <p className="mt-1 max-w-2xl text-sm text-gray-500">Something nice will show up here üëå</p>
            </div>
            <div className="border-t border-gray-200 bg-neutral-200 dark:border-slate-700 dark:bg-slate-700 h-full">
              <p className='mx-auto pl-10 pt-5 align-middle my-10'>Under constructionüèóüë∑‚Äç‚ôÄÔ∏èüë∑‚Äç‚ôÇÔ∏è</p>
            </div>
          </Card>
        </div>
      </MainLayout>
    </div>
  )
}

// This gets called on every request
export async function getStaticProps() {
  // New client to avoid mixing data with users
  const queryClient = new QueryClient()

  await queryClient.prefetchQuery(['randomActivity'], getRandomActivity)

  return {
    props: {
      dehydratedState: dehydrate(queryClient),
    },
  }
}


export default Home
