import { dehydrate, QueryClient } from '@tanstack/react-query'
import { useQuery } from '@tanstack/react-query'
import type { NextPage } from 'next'
import Head from 'next/head'
import Card from '../components/card/Card'
import MainLayout from '../layouts/mainLayout/MainLayout'
import RandomActivityCard from '../components/randomActivityCard/RandomActivityCard'
import { getRandomActivity } from '../utils/fetch'
import { getFavoriteActivities } from '../utils/activities'
import FavoriteActivitiesCard from '../components/favoriteActivitiesCard/FavoriteActivitiesCard'

interface HomeProps {
  isLoading?: boolean,
  activity?: Record<string, any>
  error?: any
}

const Home: NextPage<HomeProps> = () => {


  // Queries
  // SERVER SIDE
  const { isLoading, data: activity, error, refetch, isRefetching } = useQuery(['randomActivity'], getRandomActivity, {
    // Do not refetch automatically to don't lose the current activity
    refetchOnMount: false,
    refetchOnReconnect: false,
    refetchOnWindowFocus: false
  })

  // CLIENT SIDE
  const { isLoading: isLoadingFavorites, data: favorites, refetch: refetchFavorites } = useQuery(['favorites'], getFavoriteActivities, {
    refetchInterval: 500
  })

  const participantsNumber = activity?.participants || 1
  let participantsArray = []
  for (let i = 0; i < participantsNumber; i++) participantsArray.push(i)

  if (error || (!isLoading && !activity)) {
    return <h1>There was an error fetching data</h1>
  }

  const getAnotherRandom = () => {
    refetch()
  }

  return (
    <div >
      <Head>
        <title>WhatToDo</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <MainLayout>

        <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-10 mb-10">
          {/* Random Activity */}
          <RandomActivityCard
            activity={activity}
            isLoading={isLoading || isRefetching}
            getAnotherRandom={getAnotherRandom}
            favorites={favorites}
          />

          {/* Favorites */}
          <FavoriteActivitiesCard
            allFavorites={favorites}
          />
          <Card>
            <div className="px-4 py-5 sm:px-6">
              <h3 className="text-xl font-medium leading-6 text-gray-900 dark:text-white mb-2">Something else here üöß</h3>
              <p className="mt-1 max-w-2xl text-sm text-gray-500">Something nice will show up here üëå</p>
            </div>
            <div className="border-t border-gray-200 bg-neutral-200 dark:border-slate-700 dark:bg-slate-700 h-full">
              <p className='mx-auto pl-10 pt-5 align-middle my-10'>Under constructionüèóüë∑‚Äç‚ôÄÔ∏èüë∑‚Äç‚ôÇÔ∏è</p>
            </div>
          </Card>
        </div>
      </MainLayout>
    </div>
  )
}

// This gets called on every request
export async function getStaticProps() {
  // New client to avoid mixing data with users
  const queryClient = new QueryClient()

  await queryClient.prefetchQuery(['randomActivity'], getRandomActivity)

  return {
    props: {
      dehydratedState: dehydrate(queryClient),
    },
  }
}


export default Home
